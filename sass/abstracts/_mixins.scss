@mixin heading($fs, $color: $heading-color-default) {
  font-size: $fs;
  color: $color;

  font-family: $heading-font-family;
  text-transform: $heading-text-transform;
  letter-spacing: $heading-letter-spacing;
  font-weight: $heading-font-weight;
  line-height: $heading-line-height;
}

@mixin max-screen($size) {
  @if map-has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (max-width: $breakpoint) {
      @content;
    }
  } @else if type-of($size) == "number" {
    @if unitless($size) {
      @error 'when using a number with @max-screen() make sure to include a unit';
    } @else {
      @media screen and (max-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

@mixin min-screen($size) {
  @if map-has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if type-of($size) == "number" {
    @if unitless($size) {
      @error 'when using a number with @min-screen() make sure to include a unit';
    } @else {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

@mixin can-hover {
  @media (hover: hover) {
    @content;
  }
}

@mixin cannot-hover {
  @media (hover: none) {
    @content;
  }
}

@mixin is-dark-mode {
  :root[data-mode="dark"] & {
    @content;
  }
}

@mixin is-light-mode {
  :root[data-mode="light"] & {
    @content;
  }
}

@mixin reduced-motion {
  &.reduce-motion {
    @content;
  }

  @at-root {
    @media (prefers-reduced-motion: reduce) {
      & {
        @content;
      }
    }
  }
}

/*
 * Adaptive value mixin
 */
$maxWidth: 1920;
$maxWidthContainer: 1780;

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type == 1 {
    // Smaller than container
    #{$property}: #{$startSize}px;

    @media (max-width: #{$maxWidthContainer}px) {
      #{$property}: calc(
        #{$minSize}px + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer -
              320})
      );
    }
  } @else if $type == 2 {
    // Bigger than container
    #{$property}: #{$startSize}px;

    @media (min-width: #{$maxWidthContainer}px) {
      #{$property}: calc(
        #{$minSize}px + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    // All the time
    #{$property}: calc(
      #{$minSize}px + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
